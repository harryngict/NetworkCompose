//
// Updated on 06/16/24.
// Copyright Â© 2024. All rights reserved.
////
/// @Generated by Mockolo
///

import Foundation
import NetworkCompose
@testable import NetworkComposeImp

// MARK: - TaskMetricMock

public class TaskMetricMock: TaskMetric, @unchecked Sendable {
  public init() {}
}

// MARK: - LoggerInterfaceMock

public class LoggerInterfaceMock: LoggerInterface {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var logCallCount = 0
  public var logHandler: ((LoggerType, String) -> Void)?

  public func log(_ type: LoggerType, _ message: String) {
    logCallCount += 1
    if let logHandler {
      logHandler(type, message)
    }
  }
}

// MARK: - SSLPinningInterfaceMock

public class SSLPinningInterfaceMock: SSLPinningInterface {
  // MARK: Lifecycle

  public init() {}
  public init(host: String = "", hashKeys: Set<String> = Set<String>()) {
    self.host = host
    self.hashKeys = hashKeys
  }

  // MARK: Public

  public private(set) var hostSetCallCount = 0
  public private(set) var hashKeysSetCallCount = 0
  public var hashKeys = Set<String>() { didSet { hashKeysSetCallCount += 1 } }

  public var host = "" { didSet { hostSetCallCount += 1 } }
}

// MARK: - MetricsCollectorInterfaceMock

public class MetricsCollectorInterfaceMock: MetricsCollectorInterface {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var taskCreatedCallCount = 0
  public var taskCreatedHandler: ((URLSessionTask) -> Void)?
  public private(set) var taskDidCompleteWithErrorCallCount = 0
  public var taskDidCompleteWithErrorHandler: ((URLSessionTask, Error?) -> Void)?
  public private(set) var taskDidUpdateProgressCallCount = 0
  public var taskDidUpdateProgressHandler: ((URLSessionTask, (completed: Int64, total: Int64)) -> Void)?
  public private(set) var taskDidFinishCollectingCallCount = 0
  public var taskDidFinishCollectingHandler: ((URLSessionTask, URLSessionTaskMetrics) -> Void)?
  public private(set) var taskDidFinishDownloadingCallCount = 0
  public var taskDidFinishDownloadingHandler: ((URLSessionDownloadTask) -> Void)?

  public func taskCreated(_ task: URLSessionTask) {
    taskCreatedCallCount += 1
    if let taskCreatedHandler {
      taskCreatedHandler(task)
    }
  }

  public func taskDidCompleteWithError(_ task: URLSessionTask, error: Error?) {
    taskDidCompleteWithErrorCallCount += 1
    if let taskDidCompleteWithErrorHandler {
      taskDidCompleteWithErrorHandler(task, error)
    }
  }

  public func taskDidUpdateProgress(_ task: URLSessionTask, progress: (completed: Int64, total: Int64)) {
    taskDidUpdateProgressCallCount += 1
    if let taskDidUpdateProgressHandler {
      taskDidUpdateProgressHandler(task, progress)
    }
  }

  public func taskDidFinishCollecting(_ task: URLSessionTask, metrics: URLSessionTaskMetrics) {
    taskDidFinishCollectingCallCount += 1
    if let taskDidFinishCollectingHandler {
      taskDidFinishCollectingHandler(task, metrics)
    }
  }

  public func taskDidFinishDownloading(_ task: URLSessionDownloadTask) {
    taskDidFinishDownloadingCallCount += 1
    if let taskDidFinishDownloadingHandler {
      taskDidFinishDownloadingHandler(task)
    }
  }
}

// MARK: - MetricInterceptorInterfaceMock

public class MetricInterceptorInterfaceMock: MetricInterceptorInterface {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var sendEventCallCount = 0
  public var sendEventHandler: ((TaskMetricEvent) -> Void)?

  public func sendEvent(_ event: TaskMetricEvent) {
    sendEventCallCount += 1
    if let sendEventHandler {
      sendEventHandler(event)
    }
  }
}

// MARK: - StorageServiceInterfaceMock

class StorageServiceInterfaceMock: StorageServiceInterface {
  // MARK: Lifecycle

  init() {}

  // MARK: Internal

  private(set) var storeResponseCallCount = 0
  var storeResponseHandler: ((Any, Data, Any) throws -> Void)?
  private(set) var getResponseCallCount = 0
  var getResponseHandler: ((Any) throws -> (Any))?
  private(set) var clearMockDataInDiskCallCount = 0
  var clearMockDataInDiskHandler: (() throws -> Void)?

  func storeResponse<RequestType>(_ request: RequestType, data: Data, model: RequestType.SuccessType) throws where RequestType: RequestInterface {
    storeResponseCallCount += 1
    if let storeResponseHandler {
      try storeResponseHandler(request, data, model)
    }
  }

  func getResponse<RequestType>(_ request: RequestType) throws -> RequestType.SuccessType where RequestType: RequestInterface {
    getResponseCallCount += 1
    if let getResponseHandler {
      return try getResponseHandler(request) as! RequestType.SuccessType
    }
    fatalError("getResponseHandler returns can't have a default value thus its handler must be set")
  }

  func clearMockDataInDisk() throws {
    clearMockDataInDiskCallCount += 1
    if let clearMockDataInDiskHandler {
      try clearMockDataInDiskHandler()
    }
  }
}

// MARK: - ReAuthenticationServiceMock

public class ReAuthenticationServiceMock: ReAuthenticationService {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var reAuthenCallCount = 0
  public var reAuthenHandler: ((@escaping (Result<[String: String], NetworkError>) -> Void) -> Void)?

  public func reAuthen(completion: @escaping (Result<[String: String], NetworkError>) -> Void) {
    reAuthenCallCount += 1
    if let reAuthenHandler {
      reAuthenHandler(completion)
    }
  }
}

// MARK: - FileStorageMock

class FileStorageMock: FileStorage {
  // MARK: Lifecycle

  init() {}

  // MARK: Internal

  private(set) var urlsCallCount = 0
  var urlsHandler: ((FileManager.SearchPathDirectory, FileManager.SearchPathDomainMask) -> ([URL]))?
  private(set) var fileExistsCallCount = 0
  var fileExistsHandler: ((String) -> (Bool))?
  private(set) var createDirectoryCallCount = 0
  var createDirectoryHandler: ((URL, Bool, [FileAttributeKey: Any]?) throws -> Void)?
  private(set) var contentsOfDirectoryCallCount = 0
  var contentsOfDirectoryHandler: ((String) throws -> ([String]))?
  private(set) var removeItemCallCount = 0
  var removeItemHandler: ((String) throws -> Void)?

  func urls(for directory: FileManager.SearchPathDirectory, in domainMask: FileManager.SearchPathDomainMask) -> [URL] {
    urlsCallCount += 1
    if let urlsHandler {
      return urlsHandler(directory, domainMask)
    }
    return [URL]()
  }

  func fileExists(atPath path: String) -> Bool {
    fileExistsCallCount += 1
    if let fileExistsHandler {
      return fileExistsHandler(path)
    }
    return false
  }

  func createDirectory(at url: URL, withIntermediateDirectories createIntermediates: Bool, attributes: [FileAttributeKey: Any]?) throws {
    createDirectoryCallCount += 1
    if let createDirectoryHandler {
      try createDirectoryHandler(url, createIntermediates, attributes)
    }
  }

  func contentsOfDirectory(atPath path: String) throws -> [String] {
    contentsOfDirectoryCallCount += 1
    if let contentsOfDirectoryHandler {
      return try contentsOfDirectoryHandler(path)
    }
    return [String]()
  }

  func removeItem(atPath path: String) throws {
    removeItemCallCount += 1
    if let removeItemHandler {
      try removeItemHandler(path)
    }
  }
}

// MARK: - EndpointExpectationProviderMock

public class EndpointExpectationProviderMock: EndpointExpectationProvider {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var expectationCallCount = 0
  public var expectationHandler: ((String, NetworkMethod, [String: Any]?) -> (EndpointExpectation))?

  public func expectation(for path: String, method: NetworkMethod, queryParameters: [String: Any]?) -> EndpointExpectation {
    expectationCallCount += 1
    if let expectationHandler {
      return expectationHandler(path, method, queryParameters)
    }
    fatalError("expectationHandler returns can't have a default value thus its handler must be set")
  }
}
