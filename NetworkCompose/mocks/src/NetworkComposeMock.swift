//
// Updated on 06/16/24.
// Copyright Â© 2024. All rights reserved.
////
/// @Generated by Mockolo
///

import Foundation
import NetworkCompose

// MARK: - NetworkTaskMock

public class NetworkTaskMock: NetworkTask {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var cancelCallCount = 0
  public var cancelHandler: (() -> Void)?

  public func cancel() {
    cancelCallCount += 1
    if let cancelHandler {
      cancelHandler()
    }
  }
}

// MARK: - CookieStorageMock

public class CookieStorageMock: CookieStorage {
  // MARK: Lifecycle

  public init() {}
  public init(cookies: [HTTPCookie]? = nil) {
    self.cookies = cookies
  }

  // MARK: Public

  public private(set) var cookiesSetCallCount = 0
  public private(set) var deleteCookieCallCount = 0
  public var deleteCookieHandler: ((HTTPCookie) -> Void)?
  public private(set) var removeCookiesCallCount = 0
  public var removeCookiesHandler: ((Date) -> Void)?
  public private(set) var cookiesForCallCount = 0
  public var cookiesForHandler: ((URL) -> ([HTTPCookie]?))?
  public private(set) var addCookiesCallCount = 0
  public var addCookiesHandler: ((HTTPURLResponse) -> Void)?

  public var cookies: [HTTPCookie]? = nil { didSet { cookiesSetCallCount += 1 } }

  public func deleteCookie(_ cookie: HTTPCookie) {
    deleteCookieCallCount += 1
    if let deleteCookieHandler {
      deleteCookieHandler(cookie)
    }
  }

  public func removeCookies(since date: Date) {
    removeCookiesCallCount += 1
    if let removeCookiesHandler {
      removeCookiesHandler(date)
    }
  }

  public func cookies(for URL: URL) -> [HTTPCookie]? {
    cookiesForCallCount += 1
    if let cookiesForHandler {
      return cookiesForHandler(URL)
    }
    return nil
  }

  public func addCookies(from response: HTTPURLResponse) {
    addCookiesCallCount += 1
    if let addCookiesHandler {
      addCookiesHandler(response)
    }
  }
}

// MARK: - NetworkSessionMock

public class NetworkSessionMock: NetworkSession {
  // MARK: Lifecycle

  public init() {}
  public init(cookieStorage: CookieStorage = CookieStorageMock()) {
    self.cookieStorage = cookieStorage
  }

  // MARK: Public

  public typealias SessionRequest = Any

  public private(set) var buildCallCount = 0
  public var buildHandler: ((Any, URL, [String: String]) throws -> (SessionRequest))?
  public private(set) var beginRequestCallCount = 0
  public var beginRequestHandler: ((SessionRequest, @escaping ((Result<ResponseInterface, NetworkError>) -> Void)) -> (NetworkTask))?
  public private(set) var beginUploadTaskCallCount = 0
  public var beginUploadTaskHandler: ((SessionRequest, URL, @escaping ((Result<ResponseInterface, NetworkError>) -> Void)) -> (NetworkTask))?
  public private(set) var beginDownloadTaskCallCount = 0
  public var beginDownloadTaskHandler: ((SessionRequest, @escaping ((Result<ResponseInterface, NetworkError>) -> Void)) -> (NetworkTask))?
  public private(set) var cookieStorageSetCallCount = 0

  public var cookieStorage: CookieStorage = CookieStorageMock() { didSet { cookieStorageSetCallCount += 1 } }

  public func build(_ request: some RequestInterface, withBaseURL baseURL: URL, andHeaders headers: [String: String]) throws -> SessionRequest {
    buildCallCount += 1
    if let buildHandler {
      return try buildHandler(request, baseURL, headers)
    }
    fatalError("buildHandler returns can't have a default value thus its handler must be set")
  }

  public func beginRequest(_ request: SessionRequest, completion: @escaping ((Result<ResponseInterface, NetworkError>) -> Void)) -> NetworkTask {
    beginRequestCallCount += 1
    if let beginRequestHandler {
      return beginRequestHandler(request, completion)
    }
    return NetworkTaskMock()
  }

  public func beginUploadTask(_ request: SessionRequest, fromFile: URL, completion: @escaping ((Result<ResponseInterface, NetworkError>) -> Void)) -> NetworkTask {
    beginUploadTaskCallCount += 1
    if let beginUploadTaskHandler {
      return beginUploadTaskHandler(request, fromFile, completion)
    }
    return NetworkTaskMock()
  }

  public func beginDownloadTask(_ request: SessionRequest, completion: @escaping ((Result<ResponseInterface, NetworkError>) -> Void)) -> NetworkTask {
    beginDownloadTaskCallCount += 1
    if let beginDownloadTaskHandler {
      return beginDownloadTaskHandler(request, completion)
    }
    return NetworkTaskMock()
  }
}

// MARK: - ResponseDecoderMock

public class ResponseDecoderMock: ResponseDecoder {
  // MARK: Lifecycle

  public init() {}

  // MARK: Public

  public private(set) var decodeCallCount = 0
  public var decodeHandler: ((Any, Data) throws -> (Any))?

  public func decode<T: Decodable>(_ type: T.Type, from data: Data) throws -> T {
    decodeCallCount += 1
    if let decodeHandler {
      return try decodeHandler(type, data) as! T
    }
    fatalError("decodeHandler returns can't have a default value thus its handler must be set")
  }
}

// MARK: - ResponseInterfaceMock

public class ResponseInterfaceMock: ResponseInterface {
  // MARK: Lifecycle

  public init() {}
  public init(statusCode: Int = 0, data: Data) {
    self.statusCode = statusCode
    _data = data
  }

  // MARK: Public

  public private(set) var statusCodeSetCallCount = 0
  public private(set) var dataSetCallCount = 0

  public var statusCode = 0 { didSet { statusCodeSetCallCount += 1 } }

  public var data: Data {
    get { _data }
    set { _data = newValue }
  }

  // MARK: Private

  private var _data: Data! { didSet { dataSetCallCount += 1 } }
}
